#include <iostream>
#include <zmq.hpp>
#include <capnp/message.h>
#include <capnp/serialize-packed.h>
#include <memory>
#include "mapping.capnp.h"

int main() {
    ::capnp::MallocMessageBuilder message;
    Point::Builder pointBuilder = message.initRoot<Point>();
    pointBuilder.setX(100);
    auto wordArray = ::capnp::messageToFlatArray(message);
    auto charArray = wordArray.asChars();
    std::shared_ptr<const std::string> serialized = std::make_shared<const std::string> (charArray.begin(), charArray.end());
    

    //Point point(0, 0);
    zmq::context_t context(1);

    //  Socket to talk to server
    printf ("Connecting to hello world serverâ€¦\n");
    zmq::socket_t sock (context, ZMQ_REQ);
    sock.connect("tcp://localhost:5556");

    int request_nbr;
    for (request_nbr = 0; request_nbr != 10; request_nbr++) {
        zmq::message_t request((void*)serialized->data(), serialized->size(), NULL);
        sock.send (request, 0);

        // Handling of the reply
        zmq::message_t reply;
        sock.recv ( &reply, 0);
        std::shared_ptr<const std::string> serialized = std::make_shared<const std::string>(static_cast<char*>(reply.data()), reply.size());

        auto num_words = serialized->size() / sizeof(capnp::word);
        auto wordArray = kj::ArrayPtr<capnp::word const>(reinterpret_cast<capnp::word const*>(serialized->data()), num_words);
        ::capnp::FlatArrayMessageReader reader(wordArray);
        auto capnpMessage = reader.getRoot<Point>();

        std::cout << "Received message " << capnpMessage.getX() << std::endl;
    }
    sock.close();


    return 0;
}
